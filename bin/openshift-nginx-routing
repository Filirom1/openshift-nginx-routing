#!/usr/bin/env node

var fs = require('fs');
var Path = require('path');
var program = require('commander');
var _ = require('underscore');
var NginxRouting = require('..');

program
  .version(require('../package.json').version)
  .option('-v, --verbose', 'print debug information')
  .option('-o, --stdout <file>', 'send sdtout to file')
  .option('-e, --stderr <file>', 'send sdterr to file')
  .option('-p, --pidfile <file>', 'pidfile location')
  .parse(process.argv);

function changeConsole(options){
  if(options.stdout){
    console._stdout = fs.createWriteStream(options.stdout, { encoding: 'utf8', flags   : 'a+' });
  }
  
  if(options.stderr){
    console._stderr = fs.createWriteStream(options.stderr, { encoding: 'utf8', flags   : 'a+' });
  }
}

// read configuration file
var conf=null;

var etcConfigFile = '/etc/openshift/openshift-nginx-routing.conf';
var localConfigFile = Path.join(__dirname,  '../conf/openshift-nginx-routing.conf');

try{
  conf = fs.readFileSync(etcConfigFile);
}catch (error){
  changeConsole(program);
  console.error(error.message, 'Will load configuration from ' + localConfigFile);
  conf = fs.readFileSync(localConfigFile);
}

var options = {};
conf.toString().replace(/\#.*/g, '').split('\n').forEach(function(kv){
  if(!kv) return;
  var arr = kv.split('=');
  if(arr.lenght < 2) return

  // fix multiple equals signs
  key = arr.shift().trim();
  value = arr.join('=').trim().replace(/^['"]/, '').replace(/['"]$/, '');
  options[key] = value;
});
options.regExp = new RegExp(options.regExp);
options = _.extend({}, options, program);

changeConsole(options);

if(options.pidfile){
  fs.writeFileSync(options.pidfile, '' + process.pid);
}

var nginxRouting = new NginxRouting(options);
nginxRouting.retrieveRoutes(function(error){
  if(error){
    console.error(error);
  }
  nginxRouting.listenOnActiveMq();
});

process.on('SIGHUP', function() {
  // Do not die on hup signal
});
