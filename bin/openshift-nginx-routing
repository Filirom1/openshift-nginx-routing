#!/usr/bin/env node

var cluster = require('cluster');
var fs = require('fs');
var Path = require('path');
var program = require('commander');
var _ = require('underscore');
var NginxRouting = require('..');

program
  .version(require('../package.json').version)
  .option('-v, --verbose', 'print debug information')
  .option('-o, --stdout <file>', 'send sdtout to file')
  .option('-e, --stderr <file>', 'send sdterr to file')
  .option('-p, --pidfile <file>', 'pidfile location')
  .parse(process.argv);

function changeConsole(options){
  if(options.stdout){
    console._stdout = fs.createWriteStream(options.stdout, { encoding: 'utf8', flags   : 'a+' });
  }
  
  if(options.stderr){
    console._stderr = fs.createWriteStream(options.stderr, { encoding: 'utf8', flags   : 'a+' });
  }
}

// read configuration file
var conf=null;

var etcConfigFile = '/etc/openshift-nginx-routing.conf';
var localConfigFile = Path.join(__dirname,  '../conf/openshift-nginx-routing.conf');

try{
  conf = fs.readFileSync(etcConfigFile);
}catch (error){
  changeConsole(program);
  console.error(error.message, 'Will load configuration from ' + localConfigFile);
  conf = fs.readFileSync(localConfigFile);
}

var options = {};
conf.toString().replace(/\#.*/g, '').split('\n').forEach(function(kv){
  if(!kv) return;
  var arr = kv.split('=');
  if(arr.lenght < 2) return

  // fix multiple equals signs
  key = arr.shift().trim();
  value = arr.join('=').trim().replace(/^['"]/, '').replace(/['"]$/, '');
  options[key] = value;
});
options.regExp = new RegExp(options.regExp);
options = _.extend({}, options, program);

// Only root is allowed to send SIGHUP to nginx
if (cluster.isMaster) {
  changeConsole(program);
  if(options.pidfile){
    fs.writeFileSync(options.pidfile, process.pid.toString());
  }

  process.on('SIGHUP', function() {
    // Do not die on hup signal
  });

  var worker = cluster.fork();
  worker.on('exit', function(worker, code, signal) {
    console.error('Worker died.');
    process.exit(code);
  });

  worker.on('message', function(msg){
    if(msg.action=='reloadNginx'){
      console.log('Reload Nginx (' + msg.pid + ')');
      process.kill(msg.pid, 'SIGHUP');
    }
  });
}else{
  // Run all the important stuff with a non root-user
  changeConsole(options);
  process.setgid(options.gid);
  process.setuid(options.uid);
  var nginxRouting = new NginxRouting(options);
  nginxRouting.retrieveRoutes(function(error){
    if(error){
      console.error(error);
    }
    nginxRouting.listenOnActiveMq();
  });
}
